= Kubernetes Java Sample

This project shows different recipes to run a Java EE 7 application using Kubernetes.

== Initial setup

. Download Kubernetes from
  https://github.com/GoogleCloudPlatform/kubernetes/releases/download/v1.0.0/kubernetes.tar.gz
  and extract.
. Start Kubernetes using Vagrant

  cd kubernetes
  export KUBERNETES_PROVIDER=vagrant
  cluster/kube-up.sh

Detailed instructions:
https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/vagrant.md

== A Pod with one Container (WildFly)

. Start a Pod with WildFly container:

  kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-pod.yaml

. Get status of the Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w po
NAME            READY     STATUS    RESTARTS   AGE
wildfly-plain   0/1       Pending   0          4s
NAME            READY     STATUS    RESTARTS   AGE
wildfly-plain   0/1       Running   0          5s
wildfly-plain   1/1       Running   0         10s
----
+
NOTE: Make sure to wait for the status to change to Running.
+
. Find IP address of the pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -o=wide po
NAME            READY     STATUS    RESTARTS   AGE       NODE
wildfly-plain   1/1       Running   0          18s       10.245.1.3
----
+
. Access the main page of WildFly at http://10.245.1.3:8080/
+
. Check logs of the Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh logs wildfly-plain
----
+
. More details about the Pod can be obtained:
+
[source, text]
----
./cluster/kubectl.sh describe pod wildfly-plain

TODO: ADD OUTPUT
----
+
. Delete the Pod:

  kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-pod.yaml

== A Replication Controller with two replicas of a Pod (WildFly)

. Start a Replication Controller that has two replicas of a pod, each with a WildFly container:

  kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-rc.yaml

. Get status of the Pods:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w po
NAME               READY     STATUS    RESTARTS   AGE
my-wildfly-b1fb8   0/1       Pending   0          3s
my-wildfly-bmf6k   0/1       Pending   0          3s
NAME               READY     STATUS    RESTARTS   AGE
my-wildfly-b1fb8   0/1       Running   0          3s
my-wildfly-bmf6k   0/1       Running   0         3s
my-wildfly-b1fb8   1/1       Running   0         3s
my-wildfly-bmf6k   1/1       Running   0         11s
----
+
NOTE: Make sure to wait for the status to change to Running.
+
. Get status of the Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get rc
CONTROLLER   CONTAINER(S)   IMAGE(S)        SELECTOR      REPLICAS
my-wildfly   wildfly        jboss/wildfly   app=wildfly   2
----
+
If mulitple Replication Controllers are running then you can query for this specific one using the label:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get rc -l app=wildfly
CONTROLLER   CONTAINER(S)   IMAGE(S)        SELECTOR      REPLICAS
my-wildfly   wildfly        jboss/wildfly   app=wildfly   2
----
+
. Find IP address of the pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -o=wide po
NAME            READY     STATUS    RESTARTS   AGE       NODE
wildfly-plain   1/1       Running   0          18s       10.245.1.3
----
+
. Find ports used by each Pod:
+
[source, text]
----
----
+
. Access the main page of WildFly at http://10.245.1.3:8080/
+
. Check logs of the Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh logs wildfly-plain
----
+
. Delete the Pod as:

  kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-pod.yaml

== A Pod with one Container (Application Server and In-memory database, using WildFly + H2)

. Create Java EE 7 sample application Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh create -f ~/workspaces/kubernetes-java-sample/javaee7-hol.yaml
replicationcontrollers/javaee7-hol
----
+
. Get status of the Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w rc
CONTROLLER    CONTAINER(S)   IMAGE(S)                SELECTOR           REPLICAS
javaee7-hol   master         arungupta/javaee7-hol   name=javaee7-hol   1
----
+
. Get status of the Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w pod
NAME                READY     STATUS    RESTARTS   AGE
javaee7-hol-0zku2   0/1       Pending   0          16s
NAME                READY     STATUS    RESTARTS   AGE
javaee7-hol-0zku2   0/1       Running   0          2m
javaee7-hol-0zku2   1/1       Running   0         2m
----
+
NOTE: Make sure to wait for the status to change to Running.
+
. Find IP address of the pod as:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -o=wide pod
NAME                READY     STATUS    RESTARTS   AGE       NODE
javaee7-hol-0zku2   1/1       Running   0          2m        10.245.1.3
----
+
. Access the application at http://10.245.1.3:8080/movieplex7/
+
. Check logs of the Pod using the pod's name:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh logs javaee7-hol-0zku2
=========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: /opt/jboss/wildfly

  JAVA: /usr/lib/jvm/java/bin/java

  JAVA_OPTS:  -server -XX:+UseCompressedOops  -server -XX:+UseCompressedOops -Xms64m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true

=========================================================================

. . .

17:22:29,338 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 37) WFLYSRV0010: Deployed "movieplex7-1.0-SNAPSHOT.war" (runtime-name : "movieplex7-1.0-SNAPSHOT.war")
17:22:29,459 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
17:22:29,459 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0051: Admin console listening on http://127.0.0.1:9990
17:22:29,460 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: WildFly Full 9.0.0.Final (WildFly Core 1.0.0.Final) started in 10029ms - Started 437 of 607 services (233 services are lazy, passive or on-demand)
----
+
. Delete the Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh delete -f ~/workspaces/kubernetes-java-sample/javaee7-hol.yaml
replicationcontrollers/javaee7-hol
----

== Two Pods with a Container each (WildFly and MySQL) and a Service (MySQL)

. Start MySQL
+
[source, text]
----
./cluster/kubectl.sh create -f ~/workspaces/kubernetes-java-sample/mysql.yaml
----
+
. Publish MySQL Service
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/mysql-service.yaml
----
+
. Start WildFly
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/wildfly.json
----
+
. Get the WildFly host IP address
+
[source, text]
----
./cluster/kubectl.sh get pods | grep wildfly | awk '{ print $5 }'
----
+
Access the application at http://<IP-ADDRESS>:8080/employees/resources/employees

== OpenShift

=== Two Pods with a Container each, Wrapped in a Replication Controller, front-ended by a Service

Complete details: http://blog.arungupta.me/openshift-v3-getting-started-javaee7-wildfly-mysql/

=== Router front-ending the ``frontend'' Service

TBD


