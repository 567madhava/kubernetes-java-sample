= Kubernetes Java Sample

This project shows different recipes to run a Java EE 7 application using Kubernetes.

== Initial setup

. Download Kubernetes from
  https://github.com/GoogleCloudPlatform/kubernetes/releases/download/v1.0.0/kubernetes.tar.gz
  and extract.
. Start Kubernetes using Vagrant

  cd kubernetes
  export KUBERNETES_PROVIDER=vagrant
  cluster/kube-up.sh

Detailed instructions:
https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/vagrant.md

== One Pod with one Container and in-memory database

. Create Kubernetes cluster
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/javaee7-hol.yaml
----
+
. Get the status of Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w rc
CONTROLLER    CONTAINER(S)   IMAGE(S)                SELECTOR           REPLICAS
javaee7-hol   master         arungupta/javaee7-hol   name=javaee7-hol   1
----
+
. Get the status of Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w pod
NAME                READY     STATUS    RESTARTS   AGE
javaee7-hol-0zku2   0/1       Pending   0          16s
NAME                READY     STATUS    RESTARTS   AGE
javaee7-hol-0zku2   0/1       Running   0          2m
javaee7-hol-0zku2   1/1       Running   0         2m
----
+
NOTE: Make sure to wait for the status to change to Running.
+
. Find the IP address of the pod as:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -o=wide pod
NAME                READY     STATUS    RESTARTS   AGE       NODE
javaee7-hol-0zku2   1/1       Running   0          2m        10.245.1.3
----
+
. Access the application at http://10.245.1.3:8080/movieplex7/

== Two Pods with a Container each (WildFly and MySQL) and a Service (MySQL)

Complete details: http://blog.arungupta.me/mysql-kubernetes-service-access-wildfly-pod-techtip72/

. Start MySQL
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/mysql.json
----
+
. Publish MySQL Service
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/mysql-service.json
----
+
. Start WildFly
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/wildfly.json
----
+
. Get the WildFly host IP address
+
[source, text]
----
./cluster/kubectl.sh get pods | grep wildfly | awk '{ print $5 }'
----
+
Access the application at http://<IP-ADDRESS>:8080/employees/resources/employees

== OpenShift

=== Two Pods with a Container each, Wrapped in a Replication Controller, front-ended by a Service

Complete details: http://blog.arungupta.me/openshift-v3-getting-started-javaee7-wildfly-mysql/

=== Router front-ending the ``frontend'' Service

TBD


