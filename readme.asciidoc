= Kubernetes Java Samples

This project shows different recipes to run a Java EE application using Kubernetes.

== Initial setup

. Download Kubernetes from
  https://github.com/GoogleCloudPlatform/kubernetes/releases/download/v1.0.0/kubernetes.tar.gz
  and extract.
. Start Kubernetes using Vagrant

  cd kubernetes
  export KUBERNETES_PROVIDER=vagrant
  cluster/kube-up.sh

Detailed instructions:
https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/vagrant.md

== A Pod with One Container

This section will explain how to start a Pod with one Container. WildFly base Docker image will be used as the Container.

. Start a Pod with WildFly container:

  ./cluster/kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-pod.yaml

. Get status of the Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w po
NAME          READY     STATUS    RESTARTS   AGE
wildfly-pod   0/1       Pending   0          4s
wildfly-pod   0/1       Running   0          10s
NAME          READY     STATUS    RESTARTS   AGE
wildfly-pod   1/1       Running   0          10s
----
+
NOTE: Make sure to wait for the status to change to Running.
+
. Get complete details about the generated Pod (including IP address):
+
[source, text]
----
./cluster/kubectl.sh describe po wildfly-pod
Name:				wildfly-pod
Namespace:			default
Image(s):			jboss/wildfly
Node:				10.245.1.3/10.245.1.3
Labels:				name=wildfly
Status:				Running
Reason:				
Message:			
IP:				10.246.1.15
Replication Controllers:	<none>
Containers:
  wildfly-pod:
    Image:	jboss/wildfly
    Limits:
      cpu:		100m
    State:		Running
      Started:		Tue, 14 Jul 2015 14:32:06 -0700
    Ready:		True
    Restart Count:	0
Conditions:
  Type		Status
  Ready 	True 
Events:
  FirstSeen				LastSeen			Count	From			SubobjectPath		Reason		Message
  Tue, 14 Jul 2015 14:32:04 -0700	Tue, 14 Jul 2015 14:32:04 -0700	1	{scheduler }					scheduled	Successfully assigned wildfly-pod to 10.245.1.3
  Tue, 14 Jul 2015 14:32:04 -0700	Tue, 14 Jul 2015 14:32:04 -0700	1	{kubelet 10.245.1.3}	implicitly required container POD	pulled		Pod container image "gcr.io/google_containers/pause:0.8.0" already present on machine
  Tue, 14 Jul 2015 14:32:05 -0700	Tue, 14 Jul 2015 14:32:05 -0700	1	{kubelet 10.245.1.3}	implicitly required container POD	created		Created with docker id 39722cdb6e81
  Tue, 14 Jul 2015 14:32:05 -0700	Tue, 14 Jul 2015 14:32:05 -0700	1	{kubelet 10.245.1.3}	implicitly required container POD	started		Started with docker id 39722cdb6e81
  Tue, 14 Jul 2015 14:32:06 -0700	Tue, 14 Jul 2015 14:32:06 -0700	1	{kubelet 10.245.1.3}	spec.containers{wildfly-pod}		created		Created with docker id dd410c76c15a
  Tue, 14 Jul 2015 14:32:06 -0700	Tue, 14 Jul 2015 14:32:06 -0700	1	{kubelet 10.245.1.3}	spec.containers{wildfly-pod}		started		Started with docker id dd410c76c15a
----
+
NOTE: IP address of the Pod is shown as 10.246.1.15.
+
Only the IP address can be obtained as:
+
[source, text]
----
./cluster/kubectl.sh get -o template po wildfly-pod --template={{.status.podIP}}
----
+
. Check logs of the Pod:
+
[source, text]
----
./cluster/kubectl.sh logs wildfly-pod
=========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: /opt/jboss/wildfly

  JAVA: /usr/lib/jvm/java/bin/java

  JAVA_OPTS:  -server -XX:+UseCompressedOops  -server -XX:+UseCompressedOops -Xms64m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true

=========================================================================

OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
21:32:07,636 INFO  [org.jboss.modules] (main) JBoss Modules version 1.4.3.Final
21:32:07,944 INFO  [org.jboss.msc] (main) JBoss MSC version 1.2.6.Final
21:32:08,045 INFO  [org.jboss.as] (MSC service thread 1-7) WFLYSRV0049: WildFly Full 9.0.0.Final (WildFly Core 1.0.0.Final) starting

. . .

21:32:10,548 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
21:32:10,548 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0051: Admin console listening on http://127.0.0.1:9990
21:32:10,549 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: WildFly Full 9.0.0.Final (WildFly Core 1.0.0.Final) started in 3386ms - Started 203 of 379 services (210 services are lazy, passive or on-demand)
----
. Pod's IP is accessible only inside the cluster. To access the WildFly server running in the Pod, login to the minion:
+
[source, text]
----
kubernetes> vagrant ssh minion-1
Last login: Tue Jul 14 21:29:24 2015 from 10.0.2.2
[vagrant@kubernetes-minion-1 ~]$ 
----
+
And check that WildFly container running inside the Pod is accessible:
+
[source, text]
----
[vagrant@kubernetes-minion-1 ~]$ curl http://10.246.1.15:8080
<!--
  ~ JBoss, Home of Professional Open Source.
  ~ Copyright (c) 2014, Red Hat, Inc., and individual contributors

. . .

    </div>
</div>
</body>
</html>

----
+
. Delete the Pod:

  kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-pod.yaml

== A Replication Controller with Two Replicas of a Pod (WildFly)

This section will explain how to start a Replication Control with two replicas of a Pod. Each Pod will have one WildFly container.

. Start a Replication Controller that has two replicas of a pod, each with a WildFly container:
+
[source, text]
----
./cluster/kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-rc.yaml 
replicationcontrollers/wildfly-rc
----
. Get status of the Pods:
+
[source, text]
----
./cluster/kubectl.sh get -w po
NAME               READY     STATUS    RESTARTS   AGE
wildfly-rc-15xg5   0/1       Pending   0          2s
wildfly-rc-d5fbs   0/1       Pending   0          2s
NAME               READY     STATUS    RESTARTS   AGE
wildfly-rc-15xg5   0/1       Pending   0          5s
wildfly-rc-d5fbs   0/1       Pending   0         5s
wildfly-rc-d5fbs   0/1       Running   0         8s
wildfly-rc-15xg5   0/1       Running   0         8s
wildfly-rc-d5fbs   1/1       Running   0         15s
wildfly-rc-15xg5   1/1       Running   0         15s
----
+
NOTE: Make sure to wait for the status to change to Running.
+
. Get status of the Replication Controller:
+
[source, text]
----
./cluster/kubectl.sh get rc
CONTROLLER   CONTAINER(S)     IMAGE(S)        SELECTOR       REPLICAS
wildfly-rc   wildfly-rc-pod   jboss/wildfly   name=wildfly   2
----
+
If mulitple Replication Controllers are running then you can query for this specific one using the label:
+
[source, text]
----
./cluster/kubectl.sh get rc -l name=wildfly
CONTROLLER   CONTAINER(S)     IMAGE(S)        SELECTOR       REPLICAS
wildfly-rc   wildfly-rc-pod   jboss/wildfly   name=wildfly   2
----
+
. Get name of the running Pods:
+
[source, text]
----
./cluster/kubectl.sh get po
NAME               READY     STATUS    RESTARTS   AGE
wildfly-rc-15xg5   1/1       Running   0          36m
wildfly-rc-d5fbs   1/1       Running   0          36m
----
+
. Find IP address of each Pod (using the name):
+
[source, text]
----
./cluster/kubectl.sh get -o template po wildfly-rc-15xg5 --template={{.status.podIP}}
10.246.1.18
----
+
Find IP address of the other Pod:
+
[source, text]
----
./cluster/kubectl.sh get -o template po wildfly-rc-d5fbs --template={{.status.podIP}} --api-ve
10.246.1.19
----
+
. As mentioned earlier, Pod's IP address is accessible only inside the cluster. Login to the minion to access WildFly's main page hosted by the containers:
+
[source, text]
----
kubernetes> vagrant ssh minion-1
Last login: Tue Jul 14 21:35:12 2015 from 10.0.2.2
[vagrant@kubernetes-minion-1 ~]$ curl http://10.246.1.18:8080
<!--
  ~ JBoss, Home of Professional Open Source.

. . .

</div>
</body>
</html>
[vagrant@kubernetes-minion-1 ~]$ curl http://10.246.1.19:8080
<!--
  ~ JBoss, Home of Professional Open Source.
  ~ Copyright (c) 2014, Red Hat, Inc., and individual contributors

. . .

</div>
</body>
</html>

----

=== Automatic Restart of Pods

Replication Controller ensures that specified number of pod ``replicas'' are running at any one time. If there are too many, the replication controller kills some pods. If there are too few, it starts more.

Lets delete a Pod and see how a new Pod is automatically created.

[source, text]
----
kubernetes> ./cluster/kubectl.sh delete po wildfly-rc-15xg5
pods/wildfly-rc-15xg5
kubernetes> ./cluster/kubectl.sh get -w po
NAME               READY     STATUS    RESTARTS   AGE
wildfly-rc-0xoms   0/1       Pending   0          2s
wildfly-rc-d5fbs   1/1       Running   0          48m
NAME               READY     STATUS    RESTARTS   AGE
wildfly-rc-0xoms   0/1       Pending   0          11s
wildfly-rc-0xoms   0/1       Running   0         13s
wildfly-rc-0xoms   1/1       Running   0         21s
----

Notice how the Pod with name ``wildfly-rc-15xg5'' was deleted and a new Pod with the name ``wildfly-rc-0xoms'' was created.

Finally, delete the Replication Controller:

  kubectl.sh create -f ~/workspaces/kubernetes-java-sample/wildfly-rc.yaml

== Java EE Application deployed in a Pod with one Container (WildFly + H2)

. Create Java EE 7 sample application Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh create -f ~/workspaces/kubernetes-java-sample/javaee7-hol.yaml
replicationcontrollers/javaee7-hol
----
+
. Get status of the Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w rc
CONTROLLER    CONTAINER(S)   IMAGE(S)                SELECTOR           REPLICAS
javaee7-hol   master         arungupta/javaee7-hol   name=javaee7-hol   1
----
+
. Get status of the Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w pod
NAME                READY     STATUS    RESTARTS   AGE
javaee7-hol-0zku2   0/1       Pending   0          16s
NAME                READY     STATUS    RESTARTS   AGE
javaee7-hol-0zku2   0/1       Running   0          2m
javaee7-hol-0zku2   1/1       Running   0         2m
----
+
NOTE: Make sure to wait for the status to change to Running.
+
. Find IP address of the pod as:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -o=wide pod
NAME                READY     STATUS    RESTARTS   AGE       NODE
javaee7-hol-0zku2   1/1       Running   0          2m        10.245.1.3
----
+
. Access the application at http://10.245.1.3:8080/movieplex7/
+
. Check logs of the Pod using the pod's name:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh logs javaee7-hol-0zku2
=========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: /opt/jboss/wildfly

  JAVA: /usr/lib/jvm/java/bin/java

  JAVA_OPTS:  -server -XX:+UseCompressedOops  -server -XX:+UseCompressedOops -Xms64m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true

=========================================================================

. . .

17:22:29,338 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 37) WFLYSRV0010: Deployed "movieplex7-1.0-SNAPSHOT.war" (runtime-name : "movieplex7-1.0-SNAPSHOT.war")
17:22:29,459 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
17:22:29,459 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0051: Admin console listening on http://127.0.0.1:9990
17:22:29,460 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: WildFly Full 9.0.0.Final (WildFly Core 1.0.0.Final) started in 10029ms - Started 437 of 607 services (233 services are lazy, passive or on-demand)
----
+
. Delete the Replication Controller:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh delete -f ~/workspaces/kubernetes-java-sample/javaee7-hol.yaml
replicationcontrollers/javaee7-hol
----

== Two Pods with a Container each (WildFly and MySQL) and a Service (MySQL)

. Start MySQL Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh create -f ~/workspaces/kubernetes-java-sample/app-mysql-pod.yaml 
pods/mysql-pod
----
+
. Get status of the Pod:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w po
NAME        READY     STATUS    RESTARTS   AGE
mysql-pod   0/1       Pending   0          4s
NAME        READY     STATUS    RESTARTS   AGE
mysql-pod   0/1       Running   0          44s
mysql-pod   1/1       Running   0         44s
----
+
. Start MySQL Service:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh create -f ~/workspaces/kubernetes-java-sample/app-mysql-service.yaml 
services/mysql-service
----
+
. Get status of the Service:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w se
NAME            LABELS                                    SELECTOR                                IP(S)            PORT(S)
kubernetes      component=apiserver,provider=kubernetes   <none>                                  10.247.0.1       443/TCP
mysql-service   context=docker-k8s-lab,name=mysql-pod     context=docker-k8s-lab,name=mysql-pod   10.247.254.198   3306/TCP
----
+
If multiple services are running, then it can be narrowed by specifying labels:
+
[source, text]
----
kubernetes> ./cluster/kubectl.sh get -w se -l context=docker-k8s-lab
NAME            LABELS                                  SELECTOR                                IP(S)            PORT(S)
mysql-service   context=docker-k8s-lab,name=mysql-pod   context=docker-k8s-lab,name=mysql-pod   10.247.254.198   3306/TCP
Error from server: label selectors are not supported on services
----
+
Error message is filed as https://github.com/GoogleCloudPlatform/kubernetes/issues/11262[#11262].
+
. Start WildFly
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/wildfly.json
----
+
. Get the WildFly host IP address
+
[source, text]
----
./cluster/kubectl.sh get pods | grep wildfly | awk '{ print $5 }'
----
+
Access the application at http://<IP-ADDRESS>:8080/employees/resources/employees

== OpenShift

=== Two Pods with a Container each, Wrapped in a Replication Controller, front-ended by a Service

Complete details: http://blog.arungupta.me/openshift-v3-getting-started-javaee7-wildfly-mysql/

=== Router front-ending the ``frontend'' Service

TBD


