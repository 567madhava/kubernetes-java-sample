= Kubernetes Java Sample

This project shows different recipes to run a Java EE 7 application using Kubernetes.

== Initial setup

. Start Kubernetes using Vagrant
+
[source, text]
----
cd kubernetes

export KUBERNETES_PROVIDER=vagrant
cluster/kube-up.sh
----

Detailed instructions:
https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/vagrant.md

== One Pod with one Container and in-memory database

. Create Kubernetes cluster
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/javaee7-hol.json
----
+
. Get the host IP address
+
[source, text]
----
./cluster/kubectl.sh get pods | grep javaee7-hol | awk '{ print $5 }'
----
+
Access the application at http://<IP-ADDRESS>:8080/movieplex7

Complete details: http://blog.arungupta.me/javaee7-wildfly-kubernetes-mac-vagrant/

== Two Pods with a Container each (WildFly and MySQL) and a Service (MySQL)

Complete details: http://blog.arungupta.me/mysql-kubernetes-service-access-wildfly-pod-techtip72/

. Start MySQL
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/mysql.json
----
+
. Publish MySQL Service
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/mysql-service.json
----
+
. Start WildFly
+
[source, text]
----
./cluster/kubectl.sh create -f ../kubernetes-java-sample/wildfly.json
----
+
. Get the WildFly host IP address
+
[source, text]
----
./cluster/kubectl.sh get pods | grep wildfly | awk '{ print $5 }'
----
+
Access the application at http://<IP-ADDRESS>:8080/employees/resources/employees

== OpenShift

=== Two Pods with a Container each, Wrapped in a Replication Controller, front-ended by a Service

Complete details: http://blog.arungupta.me/openshift-v3-getting-started-javaee7-wildfly-mysql/

=== Router front-ending the ``frontend'' Service

TBD


